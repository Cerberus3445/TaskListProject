spring.application.name=currency-exchange
spring.config.import=optional:configserver:http://localhost:8888
server.port=8000
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enabled=true
spring.jpa.defer-datasource-initialization=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#вместо localhost при запуске в docker нужно поставить название сервиса eureka, в нашем случае это: naming-server
resilience4j.retry.instances.sample-api.max-attempts=5
#В верхей строчке настраиваем количество попыток для аннотации @Retry
resilience4j.retry.instances.sample-api.wait-duration=1s
#сколько ждать между попытками
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true
#1 попытка - 1 сек, 2 - 2 сек, 3 - 4 сек, 4 - 8 сек и т.д.
resilience4j.ratelimiter.instances.sample-api.limit-for-period=2
#2 запроса
resilience4j.ratelimiter.instances.sample-api.limit-refresh-period=10s
#за 10 секунд (сколько запросов можно сделать за определённый периуд времени)
resilience4j.bulkhead.instances.sample-api.max-concurrent-calls=5
#максимальное количество одновременных вызовов


#Docker with Spring Boot and Spring Cloud
management.tracing.sampling.probability=1.0
#В строчке выше настраиваем процент запросов, которые идут в zipkin(так как это может сильно нагружать сервер). В данном случае всё записывается. Если хотим 5%, то 0.05
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}] #SB3
#в логи идет имя приложение, id